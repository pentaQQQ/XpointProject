//
//  QMChatRoomViewController.m
//  IMSDK-OC
//
//  Created by HCF on 16/3/9.
//  Copyright © 2016年 HCF. All rights reserved.
//

#import "QMChatRoomViewController.h"
#import "QMChatRoomInputView.h"
#import "TCMessageManagerFaceView.h"
#import "QMChatRoomMoreView.h"
#import "QMRecordIndicatorView.h"
#import "MJRefresh.h"
#import <IMSDK/IMSDK-Swift.h>
#import <IMSDK/IMSDK.h>
#import "MLSelectPhoto.h"
#import "ShowPicViewController.h"
#import "MyTapGestureRecognizer.h"
#import "Util.h"
#import "AppDelegate.h"
#import "QMChatRoomTopView.h"
#import "QMChatRoomGuestBookViewController.h"

#import "QMChatRoomTextCell.h"
#import "QMChatRoomVoiceCell.h"
#import "QMChatRoomImageCell.h"
#import "QMChatRoomInvestigateCell.h"
#import "QMChatRoomFileCell.h"
#import "QMChatRoomIframeCell.h"
#import "QMChatRoomCellFactory.h"

#import "QMAudioManager.h"
#import "SJVoiceTransform.h"

//new
#import "QMChatTileView.h"
#import "QMFileManagerController.h"


/**
    在线客服聊天界面
 */
@interface QMChatRoomViewController ()<UITableViewDataSource, UITableViewDelegate, UITextViewDelegate, TCMessageManagerFaceViewDelegate,UIImagePickerControllerDelegate,UINavigationControllerDelegate,UIAlertViewDelegate, AVAudioRecorderDelegate> {
    
    NSMutableArray * _dataArray;
    NSArray * _investigateArray;
    
    int _dataNum;
    CGFloat _keyboardHigh;
    
    BOOL remarkHide;
    
    QMChatTileView *_titleView;
}

@property (nonatomic, assign)float upProgress;

@end

@implementation QMChatRoomViewController

- (void)setCallBack:(NSString *)callBack {
    NSLog(@"我返回了数据");
    
    NSLog(@"%@", callBack);
}

#pragma mark - 生命周期
// 注册通知
-(instancetype)init {
    self = [super init];
    if (self) {
        // 建议使用willshow和willhide
        [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(keyboardFrameChange:) name:UIKeyboardWillChangeFrameNotification object:nil];
        [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(getNewReload) name:CHATMSG_RELOAD object:nil];
        [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(robotAction) name:ROBOT_SERVICE object:nil];
        [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(customOnline) name:CUSTOMSRV_ONLINE object:nil];
        [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(customOffline) name:CUSTOMSRV_OFFLINE object:nil];
        [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(customClaim) name:CUSTOMSRV_CLAIM object:nil];
        [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(customQueue:) name:CUSTOMSRV_QUEUENUM object:nil];
        [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(customFinish) name:CUSTOMSRV_FINISH object:nil];
        [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(customAgentMessage:) name:CUSTOMSRV_AGENT object:nil];
    }
    return self;
}

// 基本配置
- (void)viewWillAppear:(BOOL)animated {
    self.navigationController.navigationBar.barTintColor = [UIColor colorWithRed:32/255.0 green:218/255.0 blue:155/255.0 alpha:0.8];
    self.navigationController.navigationBar.tintColor = [UIColor whiteColor];
    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(customInvestigate) name:CUSTOMSRV_INVESTIGATE object:nil];
}

// 开始会话
- (void)viewDidAppear:(BOOL)animated {
    if (self.isPush == NO) {
        [QMConnect sdkBeginNewChatSession:self.peerId successBlock:^(BOOL remark) {
            // 是否启动评价
            if (remark == NO) {
                self.addView.evaluateBtn.hidden = YES;
                self.addView.evaluateLabel.hidden = YES;
            }else {
                self.addView.evaluateBtn.hidden = NO;
                self.addView.evaluateLabel.hidden = NO;
            }
            NSLog(@"开始会话成功");
        } failBlock:^{
            NSLog(@"开始会话失败");
        }];
        self.isPush = YES;
    }
}

- (void)viewDidLoad {
    [super viewDidLoad];
    self.view.backgroundColor = kMainCellColor;
    
    _titleView = [[QMChatTileView alloc] initWithFrame: CGRectMake(0, 0, 150, 44)];
    self.navigationItem.titleView = _titleView;
    
    _titleView.nameLabel.text = @"客服";
    _titleView.stateInfoLabel.text = @"等待连接";

    
    _dataArray = [[NSMutableArray alloc]init];
    
    if (_dataNum == 0) {
        _dataNum = 10;
    }
    
    [self createUI];
    [self getData];
    [self getInvestigateData];
    
    [self scrollToEnd];
}

- (void)viewWillDisappear:(BOOL)animated {
    if ([self.chatInputView.inputView isFirstResponder]) {
        [self.chatInputView.inputView resignFirstResponder];
        self.chatInputView.inputView.inputView = nil;
    }
}

- (void)viewDidDisappear:(BOOL)animated {
    NSLog(@"Appear");
    
}

// 移除通知
- (void)dealloc {
    NSLog(@"销毁");
    [[NSNotificationCenter defaultCenter] removeObserver:self];
}

#pragma mark - 创建聊天室UI(消息列表、输入工具条、提示窗...)
- (void)createUI {
    // 消息列表
    self.chatTableView = [[UITableView alloc] initWithFrame:CGRectMake(0, 0, kScreenWidth, kScreenHeight-kInputViewHeight-64) style:UITableViewStylePlain];
    self.chatTableView.delegate = self;
    self.chatTableView.dataSource = self;
    self.chatTableView.backgroundColor = kMainCellColor;
    self.chatTableView.separatorStyle = UITableViewCellSeparatorStyleNone;
    [self.view addSubview:self.chatTableView];
    
    __weak QMChatRoomViewController * myChatView = self;
    MJRefreshGifHeader * header = [self.chatTableView addGifHeaderWithRefreshingBlock:^{
        [myChatView Refresh];
    }];
    header.updatedTimeHidden = YES;
    
    // 输入工具条
    self.chatInputView = [[QMChatRoomInputView alloc] initWithFrame:CGRectMake(0, kScreenHeight-kInputViewHeight-64, kScreenWidth, kInputViewHeight)];
    [self.chatInputView.voiceButton addTarget:self action:@selector(voiceBtnAction:) forControlEvents:UIControlEventTouchUpInside];
    [self.chatInputView.faceButton addTarget:self action:@selector(faceBtnAction:) forControlEvents:UIControlEventTouchUpInside];
    [self.chatInputView.addButton addTarget:self action:@selector(addBtnAction:) forControlEvents:UIControlEventTouchUpInside];
    [self.chatInputView.RecordBtn addTarget:self action:@selector(cancelRecord:) forControlEvents:UIControlEventTouchUpOutside];
    [self.chatInputView.RecordBtn addTarget:self action:@selector(RecordBtnBegin:) forControlEvents:UIControlEventTouchDown];
    [self.chatInputView.RecordBtn addTarget:self action:@selector(RecordBtnEnd:) forControlEvents:UIControlEventTouchUpInside];
    [self.chatInputView.RecordBtn addTarget:self action:@selector(RecordBtnExit:) forControlEvents:UIControlEventTouchDragExit];
    [self.chatInputView.RecordBtn addTarget:self action:@selector(RecordBtnEnter:) forControlEvents:UIControlEventTouchDragEnter];
    self.chatInputView.inputView.delegate = self;
    [self.view addSubview:self.chatInputView];
    
    // 表情面板
    self.faceView = [[TCMessageManagerFaceView alloc] initWithFrame:CGRectMake(0, kScreenHeight, kScreenWidth, 216)];
    self.faceView.delegate = self;
    [self.faceView.sendButton addTarget:self action:@selector(sendBtnAction:) forControlEvents:UIControlEventTouchUpInside];
    
    // 扩展面板
    self.addView = [[QMChatRoomMoreView alloc] initWithFrame:CGRectMake(0, kScreenHeight, kScreenWidth, 100)];
    [self.addView.photoBtn addTarget:self action:@selector(photoBtnAction) forControlEvents:UIControlEventTouchUpInside];
    [self.addView.takePicBtn addTarget:self action:@selector(takePicBtnAction) forControlEvents:UIControlEventTouchUpInside];
    [self.addView.evaluateBtn addTarget:self action:@selector(evaluateBtnAction) forControlEvents:UIControlEventTouchUpInside];
    [self.addView.takeFileBtn addTarget:self action:@selector(takeFileBtnAction) forControlEvents:UIControlEventTouchUpInside];
    
    // 顶部提示框
    self.topView = [[QMChatRoomTopView alloc] initWithFrame:CGRectMake(0, -35, kScreenWidth-40, 35)];
    [self.view addSubview:self.topView];

    // 转人工
    self.manualButotn = [UIButton buttonWithType:UIButtonTypeSystem];
    self.manualButotn.frame = CGRectMake(0, 0, 60, 30);
    self.manualButotn.titleLabel.font = [UIFont systemFontOfSize:18];
    [self.manualButotn setTitle:@"转人工" forState:UIControlStateNormal];
    [self.manualButotn addTarget:self action:@selector(customClick) forControlEvents:UIControlEventTouchUpInside];
    self.navigationItem.rightBarButtonItem = [[UIBarButtonItem alloc] initWithCustomView:self.manualButotn];
    
    // 注销
    self.logoutButton = [UIButton buttonWithType:UIButtonTypeSystem];
    self.logoutButton.frame = CGRectMake(0, 0, 60, 30);
    self.logoutButton.titleLabel.font = [UIFont systemFontOfSize:18];
    [self.logoutButton setTitle:@"注销" forState:UIControlStateNormal];
    [self.logoutButton addTarget:self action:@selector(logoutAction) forControlEvents:UIControlEventTouchUpInside];
    self.navigationItem.leftBarButtonItem = [[UIBarButtonItem alloc] initWithCustomView:self.logoutButton];
    
    self.indicatorView = [[QMRecordIndicatorView alloc] init];
    self.indicatorView.frame = CGRectMake((kScreenWidth-150)/2, (kScreenHeight-150-64)/2, 150, 150);
    
    UITapGestureRecognizer * gestureRecognizer = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(hideKeyboard)];
    [self.chatTableView addGestureRecognizer:gestureRecognizer];
    gestureRecognizer.cancelsTouchesInView = NO;
}

- (void)hideKeyboard {
    [self.chatInputView.inputView resignFirstResponder];
    self.chatInputView.inputView.inputView = nil;
}

#pragma mark - 获取数据(数据模型已存储本地)
// 获取消息数据
- (void)getData {
    _dataArray = [NSMutableArray arrayWithArray:[QMConnect getDataFromDatabase:_dataNum]];
}

// 获取后台配置的满意度调查信息
- (void)getInvestigateData {
    [QMConnect sdkGetInvestigate:^(NSArray * _Nonnull investigateArray) {
        dispatch_async(dispatch_get_main_queue(), ^{
            _investigateArray = investigateArray;
        });
    } failureBlock:^{
        dispatch_async(dispatch_get_main_queue(), ^{
            _investigateArray = [NSArray array];
        });
    }];
}

// 刷新TableView
-(void)reloadTableView {
    NSLog(@"刷新信息");
    dispatch_async(dispatch_get_main_queue(), ^{
        [self.chatTableView reloadData];
        [self scrollToEnd];
    });
}

// 新消息通知
- (void)getNewReload {
    NSLog(@"获取到新消息");
    [self getData];
    [self reloadTableView];
}


// 滑动到底部
- (void)scrollToEnd {
    if (_dataArray.count>0) {
        [_chatTableView scrollToRowAtIndexPath:[NSIndexPath indexPathForRow:_dataArray.count-1 inSection:0] atScrollPosition:UITableViewScrollPositionNone animated:NO];
    }
}

// 下拉刷新
- (void)Refresh {
    if (_dataNum>_dataArray.count) {
        [_chatTableView.gifHeader setTitle:@"没有更多消息" forState:MJRefreshHeaderStatePulling];
        [_chatTableView.gifHeader setTitle:@"没有更多消息" forState:MJRefreshHeaderStateRefreshing];
        [_chatTableView.gifHeader setTitle:@"没有更多消息" forState:MJRefreshHeaderStateWillRefresh];
        [_chatTableView.gifHeader setTitle:@"没有更多消息" forState:MJRefreshHeaderStateIdle];
    }
    _dataNum = _dataNum+10;
    [self getData];
    [_chatTableView reloadData];
    [_chatTableView.gifHeader endRefreshing];
}


#pragma mark - TableViewDelegate TableViewDataSource
- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section {
    return _dataArray.count;
}

- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath {
    CustomMessage * message = _dataArray[_dataArray.count-indexPath.row-1];
    
    NSString * identifier = @"";
    if ([message.messageType isEqualToString:@"text"]) {
        identifier = NSStringFromClass([QMChatRoomTextCell class]);
    }else if ([message.messageType isEqualToString:@"voice"]) {
        identifier = NSStringFromClass([QMChatRoomVoiceCell class]);
    }else if ([message.messageType isEqualToString:@"image"]) {
        identifier = NSStringFromClass([QMChatRoomImageCell class]);
    }else if ([message.messageType isEqualToString:@"investigate"]) {
        identifier = NSStringFromClass([QMChatRoomInvestigateCell class]);
    }else if ([message.messageType isEqualToString:@"file"]) {
        identifier = NSStringFromClass([QMChatRoomFileCell class]);
    }else if ([message.messageType isEqualToString:@"iframe"]) {
        identifier = NSStringFromClass([QMChatRoomIframeCell class]);
    }
    
    QMChatRoomBaseCell * cell = [tableView dequeueReusableCellWithIdentifier:identifier];
    if (cell == nil) {
        cell = [QMChatRoomCellFactory createCellWithClassName:identifier cellModel:message indexPath:indexPath];
    }
    
    if (indexPath.row>0) {
        CustomMessage * preMessage = _dataArray[_dataArray.count-indexPath.row];
        UInt64 disTime = message.createdTime.longLongValue - preMessage.createdTime.longLongValue;
        if (disTime<3*60*1000) {
            cell.timeLabel.hidden = YES;
        }else {
            cell.timeLabel.hidden = NO;
        }
    }else {
        cell.timeLabel.hidden = NO;
    }
    
    cell.selectionStyle = UITableViewCellSelectionStyleNone;
    [cell setData:message];
    if ([message.messageType isEqualToString:@"file"]) {
        [cell setProgress: self.upProgress];
    }
    return cell;
}

- (CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath {
    
    CGFloat height = 15;
    CustomMessage * message = _dataArray[_dataArray.count-indexPath.row-1];
    
    if (indexPath.row>0) {
        CustomMessage * preMessage = _dataArray[_dataArray.count-indexPath.row];
        UInt64 disTime = message.createdTime.longLongValue - preMessage.createdTime.longLongValue;
        if (disTime<3*60*1000) {
            height = 15;
        }else {
            height = 45;
        }
    }else {
        height = 45;
    }
    
    if ([message.messageType isEqualToString:@"text"]) {
        MLEmojiLabel *textLabel = [MLEmojiLabel new];
        textLabel.customEmojiRegex = @"\\:[^\\:]+\\:";
        textLabel.customEmojiPlistName = @"expressionImage.plist";

        textLabel.text = message.message;
        CGSize size = [textLabel preferredSizeWithMaxWidth: [UIScreen mainScreen].bounds.size.width - 160];
        textLabel.frame = CGRectMake(15, 10, size.width, size.height+5);
        
        height += (textLabel.frame.size.height+21);
        height = height>65?height:65;
    }else if ([message.messageType isEqualToString:@"voice"]) {
        height += 45;
    }else if ([message.messageType isEqualToString:@"image"]) {
        height += 140;
    }else if ([message.messageType isEqualToString:@"investigate"]) {
        height += 145;
    }else if ([message.messageType isEqualToString:@"file"]) {
        height += 100;
    }else if ([message.messageType isEqualToString:@"iframe"]) {
        height += message.height.intValue+30;
    }
    
    return height;
}

#pragma mark - InputView Action
//切换录音按钮
- (void)voiceBtnAction:(UIButton *)button {
    NSLog(@"声音按钮");
    if (self.chatInputView.RecordBtn.hidden == YES) {
        [self.chatInputView showRecordButton:YES];
        [self.chatInputView.inputView endEditing:YES];
    }else {
        [self.chatInputView showRecordButton:NO];
//        [self.chatInputView.inputView becomeFirstResponder];
        [self.chatInputView.inputView reloadInputViews];
    }
}

//表情按钮
- (void)faceBtnAction:(UIButton *)button {
    NSLog(@"表情按钮");
    if (button.tag == 1) {
        [self.chatInputView showEmotionView:YES];
        self.chatInputView.inputView.inputView = self.faceView;
    }else {
        [self.chatInputView showEmotionView:NO];
        self.chatInputView.inputView.inputView = nil;
    }
    [self.chatInputView.inputView becomeFirstResponder];
    [self.chatInputView.inputView reloadInputViews];
}

//扩展功能按钮
- (void)addBtnAction:(UIButton *)button {
    if (button.tag == 3) {
        [self.chatInputView showMoreView:YES];
        self.chatInputView.inputView.inputView = self.addView;
        [self.chatInputView.inputView becomeFirstResponder];
        [self.chatInputView.inputView reloadInputViews];
    }else {
        [self.chatInputView showMoreView:NO];
        self.chatInputView.inputView.inputView = nil;
        [self.chatInputView.inputView endEditing:YES];
    }
}

#pragma mark - Record Action
// 开始录音
- (void)RecordBtnBegin:(UIButton *)button {
    NSLog(@"开始录音");
    [self changeButtonStatus:YES];
    [self.view addSubview:self.indicatorView];
    
    QMAudioManager *recorder = [QMAudioManager sharedInstance];
    
    CFUUIDRef uuidObject = CFUUIDCreate(kCFAllocatorDefault);
    CFStringRef uuidStr = CFUUIDCreateString(kCFAllocatorDefault, uuidObject);
    NSString * fileName = [NSString stringWithFormat:@"%@",uuidStr];
    
    [recorder beginRecordWithFileName:fileName withDelegate:self];
    
    recorder.recordUpdateImage = ^() {
        [self.indicatorView updateImageWithPower:[[QMAudioManager sharedInstance] pickMaxRecordPower]];
    };
    
    recorder.RecordTimeOutAction = ^() {
        NSLog(@"最大时间");
    };
    [recorder startTimer];
}

// 结束录音
- (void)RecordBtnEnd:(UIButton *)button {
    NSLog(@"结束录音");
    [self changeButtonStatus:NO];
    [self.indicatorView removeFromSuperview];
    [self.indicatorView dragAction:NO];
    QMAudioManager *recorder = [QMAudioManager sharedInstance];
    
    if ([recorder.recorder currentTime] < 1) {
        [recorder endRecord];
        return;
    }
    
    NSString * filePath = [NSString stringWithFormat:@"%@/%@/%@",NSHomeDirectory(),@"Documents",[recorder audioFileName]];
    [SJVoiceTransform stransformToMp3ByUrlWithUrl:filePath];
    
    [recorder endRecord];
    
    NSError *playError = nil;
    NSString * duration = @"";
    AVAudioPlayer *play = [[AVAudioPlayer alloc] initWithContentsOfURL:[NSURL fileURLWithPath:filePath] error:&playError];
    if (playError == nil) {
        duration = [NSString stringWithFormat:@"%.f", play.duration];
    }
    [self sendAudio: duration];
}

// 取消录音
- (void)cancelRecord: (UIButton *)button {
    NSLog(@"取消录音");
    [self.indicatorView removeFromSuperview];
    [self.indicatorView dragAction:NO];
    [self changeButtonStatus:NO];
    [[QMAudioManager sharedInstance] endRecord];
}

- (void)RecordBtnExit: (UIButton *)button {
    [self.indicatorView dragAction:YES];
}

- (void)RecordBtnEnter: (UIButton *)button {
    [self.indicatorView dragAction:NO];
}

// 更改按钮状态
- (void)changeButtonStatus: (BOOL)down {
    if (down == YES) {
        [self.chatInputView.RecordBtn setTitle:@"松开    发送" forState:UIControlStateNormal];
        [self.chatInputView.RecordBtn setTitleColor:[UIColor colorWithRed:50/255.0f green:167/255.0f blue:255/255.0f alpha:1.0] forState:UIControlStateNormal];
        self.chatInputView.RecordBtn.layer.borderColor = [[UIColor colorWithRed:50/255.0f green:167/255.0f blue:255/255.0f alpha:1.0] CGColor];
        [self.chatInputView.RecordBtn setTintColor:[UIColor colorWithRed:50/255.0f green:167/255.0f blue:255/255.0f alpha:1.0]];
    }else {
        [self.chatInputView.RecordBtn setTitle:@"按住    说话" forState:UIControlStateNormal];
        [self.chatInputView.RecordBtn setTitleColor:[UIColor grayColor] forState:UIControlStateNormal];
        self.chatInputView.RecordBtn.layer.borderColor = [[UIColor grayColor] CGColor];
    }
}

#pragma mark - MoreView Action
//通过摄像头获取图片
- (void)photoBtnAction {
    NSLog(@"照相");
    if ([UIImagePickerController isSourceTypeAvailable:UIImagePickerControllerSourceTypeCamera]) {
        UIImagePickerController * imagePicker = [[UIImagePickerController alloc] init];
        imagePicker.delegate = self;
        imagePicker.allowsEditing = YES;
        imagePicker.sourceType = UIImagePickerControllerSourceTypeCamera;
        [self presentViewController:imagePicker animated:YES completion:nil];
    }
}

//相机代理方法
- (void)imagePickerController:(UIImagePickerController *)picker didFinishPickingMediaWithInfo:(NSDictionary *)info {
    if ([UIImagePickerController isSourceTypeAvailable:UIImagePickerControllerSourceTypeCamera]) {
        UIImage * myImage = [info objectForKey:UIImagePickerControllerOriginalImage];
        [picker dismissViewControllerAnimated:YES completion:nil];
        UIImageWriteToSavedPhotosAlbum(myImage, nil, nil, nil);
        [self sendImage:myImage];
    }
}

//从相册获取图片
- (void)takePicBtnAction {
    NSLog(@"获取照片");
    MLSelectPhotoPickerViewController * picVC = [[MLSelectPhotoPickerViewController alloc] init];
    picVC.status = PickerViewShowStatusCameraRoll;
    picVC.minCount = 5;
    [self presentViewController:picVC animated:YES completion:^{
        picVC.callBack = ^(NSArray * asserts){
            for (MLSelectPhotoAssets * asset in asserts) {
                UIImage * image = asset.originImage;
                [self sendImage:image];
            }
        };
    }];
}

// 获取文件
- (void)takeFileBtnAction {
    QMFileManagerController * fileViewController = [[QMFileManagerController alloc] init];
//    fileViewController.callBackBlock = ^(NSString *name, NSString *size, NSString *path){
//        // 文件管理器各界面在同一个控制器下可用此方法回调
//        NSLog(@"回调文件参数");
//        NSLog(@"%@", name);
//        NSLog(@"%@", size);
//        NSLog(@"%@", path);
//    };
    [self.navigationController pushViewController:fileViewController animated:true];
}

// 满意度评价
- (void)evaluateBtnAction {
    NSLog(@"评价按钮");
    //     判断本地是否有缓存的评价信息
    
    UIAlertController * investigateAlertView = [UIAlertController alertControllerWithTitle:@"评价" message:nil preferredStyle:UIAlertControllerStyleAlert];
    for (NSDictionary * index in _investigateArray) {
        UIAlertAction * action = [UIAlertAction actionWithTitle:[index objectForKey:@"name"] style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) {
            [QMConnect sdkSubmitInvestigate:[index objectForKey:@"name"] value:[index objectForKey:@"value"] successBlock:^{
                NSLog(@"评价成功");
            } failBlock:^{
                NSLog(@"评价失败");
            }];
        }];
        [investigateAlertView addAction:action];
    }
    UIAlertAction * cancelAction = [UIAlertAction actionWithTitle:@"取消" style:UIAlertActionStyleCancel handler:^(UIAlertAction * _Nonnull action) {
        
    }];
    [investigateAlertView addAction:cancelAction];
    [self presentViewController:investigateAlertView animated:YES completion:nil];
}

#pragma mark - Send Message
// 发送文本
- (BOOL)textView:(UITextView *)textView shouldChangeTextInRange:(NSRange)range replacementText:(NSString *)text {
    if ([text isEqual:@"\n"]) {
        if (![_chatInputView.inputView.text isEqualToString:@""]) {
            [QMConnect sendMsgText:_chatInputView.inputView.text successBlock:^{
                NSLog(@"文本消息发送成功");
            } failBlock:^{
                NSLog(@"文本消息发送失败");
            }];
            _chatInputView.inputView.text = @"";
            return NO;
        }
        return NO;
    }
    return  YES;
}

//发送表情
- (void)sendBtnAction:(UIButton *)button  {
    NSLog(@"发送消息");
    if (![_chatInputView.inputView.text isEqualToString:@""]) {
        [QMConnect sendMsgText:_chatInputView.inputView.text successBlock:^{
            NSLog(@"发送成功");
        } failBlock:^{
            NSLog(@"发送失败");
        }];
        _chatInputView.inputView.text = @"";
    }
}

// 发送图片
- (void)sendImage:(UIImage *)image {
    [QMConnect sendMsgPic:image successBlock:^{
        NSLog(@"图片发送成功");
    } failBlock:^{
        NSLog(@"图片发送失败");
    }];
}

// 发送语音
- (void)sendAudio: (NSString *)duration {
    NSLog(@"发送语音");
    NSString *filePath = [NSString stringWithFormat:@"%@.mp3", [[QMAudioManager sharedInstance] audioFileName]];
    
    [QMConnect sendMsgAudio:filePath duration:duration successBlock:^{
        NSLog(@"语音发送成功");
    } failBlock:^(NSString * _Nonnull reason) {
        NSLog(@"语音发送失败");
    }];
}

// 发送文件消息
- (void)sendFileMessageWithName:(NSString *)fileName AndSize:(NSString *)fileSize AndPath:(NSString *)filePath {
    NSLog(@"收到的文件属性");
    NSLog(@"%@", fileName);
    NSLog(@"%@", fileSize);
    NSLog(@"%@", filePath);
    
    [QMConnect sendMsgFile:fileName filePath:filePath fileSize:fileSize progressHander:^(float progress) {
        dispatch_async(dispatch_get_main_queue(), ^{
            self.upProgress = progress;
            [self.chatTableView reloadData];
        });
    } successBlock:^{
        NSLog(@"文件上传成功");
    } failBlock:^{
        NSLog(@"文件上传失败");
    }];
}

// 失败消息重新发送
- (void)resendAction:(MyTapGestureRecognizer *)gestureRecognizer {
    NSLog(@"点击重新发送");
    NSArray * dataArray = [[NSArray alloc] init];
    dataArray = [QMConnect getOneDataFromDatabase:gestureRecognizer.messageId];
    for (CustomMessage * custom in dataArray) {
        [QMConnect resendMessage:custom successBlock:^{
            NSLog(@"重新发送成功");
        } failBlock:^{
            NSLog(@"重新发送失败");
        }];
    }
}

// 表情代理方法
- (void)SendTheFaceStr:(NSString *)faceStr isDelete:(BOOL)dele {
    if (dele) {
        if ([_chatInputView.inputView.text isEqualToString:@""]) {
            return;
        }
        _chatInputView.inputView.text = [_chatInputView.inputView.text substringWithRange:NSMakeRange(0, _chatInputView.inputView.text.length-1)];
        return;
    }
    _chatInputView.inputView.text = [NSString stringWithFormat:@"%@%@",_chatInputView.inputView.text,faceStr];
}

#pragma mark - Multi Function
// 注销事件
- (void)logoutAction {
    [QMConnect logout];
    [self.navigationController popViewControllerAnimated:YES];
}

// 转人工客服
- (void)customClick {
    NSLog(@"开始转人工");
    [QMConnect sdkConvertManual:^{
        NSLog(@"转人工客服成功");
    } failBlock:^{
        NSLog(@"转人工客服失败");
        dispatch_async(dispatch_get_main_queue(), ^{
            [self showGuestBookViewController];
        });
    }];
}

#pragma mark - 留言提示
- (void)showGuestBookViewController {
    UIAlertController *alertView = [UIAlertController alertControllerWithTitle:@"提示" message:@"客服不在线，请输入留言信息" preferredStyle:UIAlertControllerStyleAlert];
    UIAlertAction *sureAction = [UIAlertAction actionWithTitle:@"留言" style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) {
        QMChatRoomGuestBookViewController *guestBookViewController = [[QMChatRoomGuestBookViewController alloc] init];
        guestBookViewController.peerId = self.peerId;
        [self.navigationController pushViewController:guestBookViewController animated:YES];
    }];
    UIAlertAction *cancel = [UIAlertAction actionWithTitle:@"退出" style:UIAlertActionStyleCancel handler:^(UIAlertAction * _Nonnull action) {
        [self.navigationController popViewControllerAnimated:YES];
    }];
    [alertView addAction:sureAction];
    [alertView addAction:cancel];
    [self presentViewController:alertView animated:YES completion:nil];
}

#pragma mark - Push Notification
// 键盘通知
- (void)keyboardFrameChange: (NSNotification *)notification {
    NSLog(@"键盘通知");
    NSDictionary * userInfo =  notification.userInfo;
    NSValue * value = [userInfo objectForKey:UIKeyboardFrameEndUserInfoKey];
    CGRect newFrame = [value CGRectValue];
    if (newFrame.origin.y == kScreenHeight) {
        [UIView animateWithDuration:0.3 animations:^{
            self.chatInputView.frame = CGRectMake(0, kScreenHeight-kInputViewHeight-64, kScreenWidth, kInputViewHeight);
            self.chatTableView.frame = CGRectMake(0, 0, kScreenWidth, kScreenHeight-64-kInputViewHeight);
        }];
    }else {
        [UIView animateWithDuration:0.3 animations:^{
            self.chatInputView.frame = CGRectMake(0, kScreenHeight-kInputViewHeight-newFrame.size.height-64, kScreenWidth, kInputViewHeight);
            self.chatTableView.frame = CGRectMake(0, 0, kScreenWidth, kScreenHeight-64-kInputViewHeight-newFrame.size.height);
            [self scrollToEnd];
        }];
    }
}

// 机器人客服
- (void)robotAction {
    NSLog(@"机器人客服");
    _titleView.stateInfoLabel.text = @"机器人客服";
    self.manualButotn.hidden = NO;
}

// 客服在线
- (void)customOnline {
    NSLog(@"客服在线");
    _titleView.stateInfoLabel.text = @"客服在线";
    self.manualButotn.hidden = YES;
}

// 客服离线
- (void)customOffline {
    NSLog(@"客服离线");

    self.manualButotn.hidden = NO;
    _titleView.stateInfoLabel.text = @"客服离线";
    
    [self showGuestBookViewController];
}

// 会话领取
- (void)customClaim {
    NSLog(@"会话被坐席领取");
    _titleView.stateInfoLabel.text = @"客服在线";
    self.manualButotn.hidden = YES;
}

// 排队人数
- (void)customQueue: (NSNotification *)notification {
    NSLog(@"排队人数 %@", notification.object);
    _titleView.stateInfoLabel.text = [NSString stringWithFormat:@"目前排队人数: %@", notification.object];
    self.manualButotn.hidden = YES;
}

// 满意度推送
- (void)customInvestigate {
    NSLog(@"满意度通知");
    UIAlertController * alertController = [UIAlertController alertControllerWithTitle:@"" message:@"满意度评价" preferredStyle:UIAlertControllerStyleActionSheet];
    for (NSDictionary *index in _investigateArray) {
        [alertController addAction:[UIAlertAction actionWithTitle:[index objectForKey:@"name"] style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) {
            [QMConnect sdkSubmitInvestigate:[index objectForKey:@"name"] value:[index objectForKey:@"value"] successBlock:^{
                NSLog(@"评价成功");
            } failBlock:^{
                NSLog(@"评价失败");
            }];
        }]];
    };
    [alertController addAction:[UIAlertAction actionWithTitle:@"取消" style:UIAlertActionStyleDestructive handler:nil]];
    [self presentViewController:alertController animated:true completion:nil];
}

// 离线推送 （坐席在后台结束会话，返回上一界面）
- (void)customFinish {
    NSLog(@"客服结束会话");
    _titleView.stateInfoLabel.text = @"客服结束会话";
}

// 坐席信息 (坐席工号、坐席名称、坐席头像) 可能为空需要判断
- (void)customAgentMessage: (NSNotification *)notification {
    QMAgent *agent = notification.object;
        
    NSLog(@"%@===%@===%@", agent.exten, agent.name, agent.icon_url);
    NSLog(@"%@", [NSString stringWithFormat:@"%@(%@)", agent.name, agent.exten]);
    
    NSString *string = [NSString stringWithFormat:@"%@(%@)", agent.name, agent.exten];
    string = [string stringByReplacingOccurrencesOfString:@"\n" withString:@""];
    
    _titleView.nameLabel.text = [NSString stringWithFormat:@"%@",string];
}


- (void)didReceiveMemoryWarning {
    [super didReceiveMemoryWarning];
    // Dispose of any resources that can be recreated.
}

@end
